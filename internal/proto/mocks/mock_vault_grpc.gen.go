// Code generated by MockGen. DO NOT EDIT.
// Source: internal/proto/vault_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/pinbrain/gophkeeper/internal/proto"
	grpc "google.golang.org/grpc"
)

// MockVaultServiceClient is a mock of VaultServiceClient interface.
type MockVaultServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultServiceClientMockRecorder
}

// MockVaultServiceClientMockRecorder is the mock recorder for MockVaultServiceClient.
type MockVaultServiceClientMockRecorder struct {
	mock *MockVaultServiceClient
}

// NewMockVaultServiceClient creates a new mock instance.
func NewMockVaultServiceClient(ctrl *gomock.Controller) *MockVaultServiceClient {
	mock := &MockVaultServiceClient{ctrl: ctrl}
	mock.recorder = &MockVaultServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultServiceClient) EXPECT() *MockVaultServiceClientMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockVaultServiceClient) AddData(ctx context.Context, in *proto.AddDataReq, opts ...grpc.CallOption) (*proto.AddDataRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddData", varargs...)
	ret0, _ := ret[0].(*proto.AddDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData.
func (mr *MockVaultServiceClientMockRecorder) AddData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockVaultServiceClient)(nil).AddData), varargs...)
}

// DeleteData mocks base method.
func (m *MockVaultServiceClient) DeleteData(ctx context.Context, in *proto.DeleteDataReq, opts ...grpc.CallOption) (*proto.DeleteDataRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteData", varargs...)
	ret0, _ := ret[0].(*proto.DeleteDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockVaultServiceClientMockRecorder) DeleteData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockVaultServiceClient)(nil).DeleteData), varargs...)
}

// GetAllByType mocks base method.
func (m *MockVaultServiceClient) GetAllByType(ctx context.Context, in *proto.GetAllByTypeReq, opts ...grpc.CallOption) (*proto.GetAllByTypeRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllByType", varargs...)
	ret0, _ := ret[0].(*proto.GetAllByTypeRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByType indicates an expected call of GetAllByType.
func (mr *MockVaultServiceClientMockRecorder) GetAllByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByType", reflect.TypeOf((*MockVaultServiceClient)(nil).GetAllByType), varargs...)
}

// GetData mocks base method.
func (m *MockVaultServiceClient) GetData(ctx context.Context, in *proto.GetDataReq, opts ...grpc.CallOption) (*proto.GetDataRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetData", varargs...)
	ret0, _ := ret[0].(*proto.GetDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockVaultServiceClientMockRecorder) GetData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockVaultServiceClient)(nil).GetData), varargs...)
}

// UpdateData mocks base method.
func (m *MockVaultServiceClient) UpdateData(ctx context.Context, in *proto.UpdateDataReq, opts ...grpc.CallOption) (*proto.UpdateDataRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateData", varargs...)
	ret0, _ := ret[0].(*proto.UpdateDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockVaultServiceClientMockRecorder) UpdateData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockVaultServiceClient)(nil).UpdateData), varargs...)
}

// MockVaultServiceServer is a mock of VaultServiceServer interface.
type MockVaultServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVaultServiceServerMockRecorder
}

// MockVaultServiceServerMockRecorder is the mock recorder for MockVaultServiceServer.
type MockVaultServiceServerMockRecorder struct {
	mock *MockVaultServiceServer
}

// NewMockVaultServiceServer creates a new mock instance.
func NewMockVaultServiceServer(ctrl *gomock.Controller) *MockVaultServiceServer {
	mock := &MockVaultServiceServer{ctrl: ctrl}
	mock.recorder = &MockVaultServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultServiceServer) EXPECT() *MockVaultServiceServerMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockVaultServiceServer) AddData(arg0 context.Context, arg1 *proto.AddDataReq) (*proto.AddDataRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddData", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData.
func (mr *MockVaultServiceServerMockRecorder) AddData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockVaultServiceServer)(nil).AddData), arg0, arg1)
}

// DeleteData mocks base method.
func (m *MockVaultServiceServer) DeleteData(arg0 context.Context, arg1 *proto.DeleteDataReq) (*proto.DeleteDataRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockVaultServiceServerMockRecorder) DeleteData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockVaultServiceServer)(nil).DeleteData), arg0, arg1)
}

// GetAllByType mocks base method.
func (m *MockVaultServiceServer) GetAllByType(arg0 context.Context, arg1 *proto.GetAllByTypeReq) (*proto.GetAllByTypeRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByType", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetAllByTypeRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByType indicates an expected call of GetAllByType.
func (mr *MockVaultServiceServerMockRecorder) GetAllByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByType", reflect.TypeOf((*MockVaultServiceServer)(nil).GetAllByType), arg0, arg1)
}

// GetData mocks base method.
func (m *MockVaultServiceServer) GetData(arg0 context.Context, arg1 *proto.GetDataReq) (*proto.GetDataRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockVaultServiceServerMockRecorder) GetData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockVaultServiceServer)(nil).GetData), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockVaultServiceServer) UpdateData(arg0 context.Context, arg1 *proto.UpdateDataReq) (*proto.UpdateDataRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateDataRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockVaultServiceServerMockRecorder) UpdateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockVaultServiceServer)(nil).UpdateData), arg0, arg1)
}

// mustEmbedUnimplementedVaultServiceServer mocks base method.
func (m *MockVaultServiceServer) mustEmbedUnimplementedVaultServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVaultServiceServer")
}

// mustEmbedUnimplementedVaultServiceServer indicates an expected call of mustEmbedUnimplementedVaultServiceServer.
func (mr *MockVaultServiceServerMockRecorder) mustEmbedUnimplementedVaultServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVaultServiceServer", reflect.TypeOf((*MockVaultServiceServer)(nil).mustEmbedUnimplementedVaultServiceServer))
}

// MockUnsafeVaultServiceServer is a mock of UnsafeVaultServiceServer interface.
type MockUnsafeVaultServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVaultServiceServerMockRecorder
}

// MockUnsafeVaultServiceServerMockRecorder is the mock recorder for MockUnsafeVaultServiceServer.
type MockUnsafeVaultServiceServerMockRecorder struct {
	mock *MockUnsafeVaultServiceServer
}

// NewMockUnsafeVaultServiceServer creates a new mock instance.
func NewMockUnsafeVaultServiceServer(ctrl *gomock.Controller) *MockUnsafeVaultServiceServer {
	mock := &MockUnsafeVaultServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVaultServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVaultServiceServer) EXPECT() *MockUnsafeVaultServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVaultServiceServer mocks base method.
func (m *MockUnsafeVaultServiceServer) mustEmbedUnimplementedVaultServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVaultServiceServer")
}

// mustEmbedUnimplementedVaultServiceServer indicates an expected call of mustEmbedUnimplementedVaultServiceServer.
func (mr *MockUnsafeVaultServiceServerMockRecorder) mustEmbedUnimplementedVaultServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVaultServiceServer", reflect.TypeOf((*MockUnsafeVaultServiceServer)(nil).mustEmbedUnimplementedVaultServiceServer))
}
